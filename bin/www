#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require("../build/app");
var debug = require("debug")("dashboard-horizonui-back:server");
var https = require('https');
// var http = require("http");
/**
 * Get port from environment and store in Express.
 */
const fs = require("fs");
const path = require("path");
var port = normalizePort(process.env.PORT || '8000');
app.set("port", port);
const AUTH0_SESSION_ROLLING = process.env.AUTH0_SESSION_ROLLING === 'true';
const AUTH0_SESSION_ROLLING_DURATION = parseInt(process.env.AUTH0_SESSION_ROLLING_DURATION || '60', 10);
/**
 * Create HTTPs server.
//  */
const certsDir = "C:/Program Files (x86)/ciot/certs/";

var serverOptions = {
  key: fs.readFileSync(path.resolve(__dirname, "./certs/privKey.pem")),
  cert: fs.readFileSync(path.resolve(__dirname, "./certs/cert.pem")),
};
//프로젝트 외부 인증 ssl
// var serverOptions = {
// key: fs.readFileSync(path.resolve(certsDir+"privKey.pem")),
// cert: fs.readFileSync(path.resolve(certsDir+"cert.pem")),
// };
// var server = http.createServer(app);

var server = https.createServer(serverOptions, app);
/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on("error", onError);
server.on("listening", onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      proc_name.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      proc_name.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
}
